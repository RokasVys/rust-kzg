From c3d4cb77f5a797bd8f454a0d88e034391514ebd7 Mon Sep 17 00:00:00 2001
From: sirse <artiom.tretjakovas2@gmail.com>
Date: Thu, 26 Oct 2023 13:46:19 +0300
Subject: [PATCH] Patch rust binding

---
 bindings/rust/Cargo.toml |  1 +
 bindings/rust/build.rs   | 29 +++++------------------------
 2 files changed, 6 insertions(+), 24 deletions(-)

diff --git a/bindings/rust/Cargo.toml b/bindings/rust/Cargo.toml
index ab1f5b8..44e410e 100644
--- a/bindings/rust/Cargo.toml
+++ b/bindings/rust/Cargo.toml
@@ -1,3 +1,4 @@
+[workspace]
 [package]
 name = "c-kzg"
 version = "0.1.0"
diff --git a/bindings/rust/build.rs b/bindings/rust/build.rs
index 692305a..e874ccd 100644
--- a/bindings/rust/build.rs
+++ b/bindings/rust/build.rs
@@ -15,24 +15,7 @@ fn main() {
 
     let c_src_dir = root_dir.join("src");
 
-    let mut cc = cc::Build::new();
-
-    #[cfg(windows)]
-    {
-        cc.flag("-D_CRT_SECURE_NO_WARNINGS");
-
-        // In blst, if __STDC_VERSION__ isn't defined as c99 or greater, it will typedef a bool to
-        // an int. There is a bug in bindgen associated with this. It assumes that a bool in C is
-        // the same size as a bool in Rust. This is the root cause of the issues on Windows. If/when
-        // this is fixed in bindgen, it should be safe to remove this compiler flag.
-        cc.flag("/std:c11");
-    }
-
-    cc.include(blst_headers_dir.clone());
-    cc.warnings(false);
-    cc.file(c_src_dir.join("c_kzg_4844.c"));
-
-    cc.try_compile("ckzg").expect("Failed to compile ckzg");
+    let rust_kzg_target_dir = root_dir.join("../../target/release/");
 
     let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());
     let bindings_out_path = out_dir.join("generated.rs");
@@ -46,14 +29,12 @@ fn main() {
     );
 
     // Finally, tell cargo this provides ckzg/ckzg_min
-    println!("cargo:rustc-link-lib=ckzg");
+    println!("cargo:rustc-link-search={}", rust_kzg_target_dir.display());
+    println!("cargo:rustc-link-arg=-l:rust_kzg_blst.a");
 }
 
-fn make_bindings<P>(
-    header_path: &str,
-    blst_headers_dir: &str,
-    bindings_out_path: P,
-) where
+fn make_bindings<P>(header_path: &str, blst_headers_dir: &str, bindings_out_path: P)
+where
     P: AsRef<std::path::Path>,
 {
     use bindgen::Builder;
-- 
2.34.1

